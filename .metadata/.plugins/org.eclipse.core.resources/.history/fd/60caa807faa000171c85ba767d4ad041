package binarytree;

public class BinaryTree<T extends Comparable<T>> {
	Node<T> root = null;

	public class Node<T extends Comparable<T>> {
		Node leftChild;
		Node rightChild;
		Node parent;
		T key;
	}

	public void print(Node node) {
		System.out.println(node.leftChild.key);
	}
	
	public void delete(T key){
		Node temNode=new Node();
		Node newNode=new Node();
		newNode.key=key;
		temNode=root;
		while(newNode.key!=temNode.key){
		if(temNode.key.compareTo(newNode.key)<0){
			temNode=temNode.rightChild;
		}else
			temNode=temNode.leftChild;
	}
		if(temNode.leftChild==null){
			transplant(temNode,temNode.rightChild);
		}else if(temNode.rightChild==null){
			transplant(temNode, temNode.leftChild);
		}
		else{
			Node minRight=minimum(temNode.rightChild);
			if(minRight.parent!=temNode){
				transplant(minRight, minRight.rightChild);
				minRight.rightChild=temNode.rightChild;
				minRight.rightChild.parent=minRight;
			}
			transplant(temNode, minRight);
			minRight.leftChild=temNode.leftChild;
			minRight.leftChild.parent=minRight;
		}
	}
//	public void delete(T key){
////		Node newNode=new Node();
////		newNode.key=key;
////		Node tem=root;
////		
////		
////			if (newNode.key.compareTo(tem.key) < 0) {
////				tem = tem.leftChild;
////			} else {
////				tem = tem.rightChild;
////			}
////		}
	//tem是最后和给定值相等的节点。
//		if (tem.rightChild==null)
//				transplant();
//		else if  tem.rightChild==null
//				transplant();
//		else y=treeMinimum(tem.rightChild)   //右孩子中的最小值。
//				if (y.p!=z)
//				    transplant(t,y,y.right)
//				    y.right=z.right
//				    y.right.p=y
//				  Transplant(T,z,y)
//		y.left.p=z.left
//	}
//
//	private void transplant() {
//		// TODO Auto-generated method stub
//		
//	}

	private Node minimum(Node rightChild) {
		// TODO Auto-generated method stub
		while(rightChild.leftChild!=null){
			rightChild=rightChild.leftChild;
		}
		return rightChild;
	}

	private void transplant(Node temNode, Node rightChild) {
		// TODO Auto-generated method stub
		if(temNode.parent==null){
			root=rightChild;
		}else if(temNode.key.compareTo(temNode.parent.leftChild.key)==0){
			temNode.parent.leftChild=rightChild;
		}else{
			temNode.parent.leftChild=temNode;
		}
		if(rightChild!=null){
			rightChild.parent=temNode.parent;
		}
	}

	
	
	
	
	
	public void insert(T key) { // 向二叉树中插入
		Node newNode = new Node();
		newNode.key = key;
		Node tem = root;
		Node p = null;
		while (tem != null) {
			p = tem;
			if (newNode.key.compareTo(tem.key) < 0) {
				tem = tem.leftChild;
			} else {
				tem = tem.rightChild;
			}
		}
		newNode.parent = p;

		if (p == null) {                           //二叉树为空时。
			root = newNode;

		} else if ((newNode.key).compareTo(p.key) < 0) {

			p.leftChild = newNode;
		} else {
			p.rightChild = newNode;
		}
	}

}
