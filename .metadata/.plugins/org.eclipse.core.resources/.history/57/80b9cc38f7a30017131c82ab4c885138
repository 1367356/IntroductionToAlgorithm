package dynamicProgramming;

import java.util.ArrayList;
import java.util.List;

public class DynamicProgramming {
	
	public void printCutRodSolution(int[] p,int n){
		List list=extendedBottomUpCutRod(p, n);
		int[] s=(int[]) list.get(2);
		while(n>0){
			System.out.println(s[n]);
			n=n-s[n];
			
		}
	}
	/**
	 * 重构解，保存最优解路径，而不只是打印最优解值
	 * @param p 长度对应的价格数组
	 * @param n 长度
	 * @return	一个数组列表，里面存放的是两个数组，数组1为一个最优值，数组2为最有路径。
	 */
	public List extendedBottomUpCutRod(int[] p,int n){
		List list=new ArrayList<int[]>();
		int[] r=new int[n];
		int[] s=new int[n];
		r[0]=0;
		
		for (int j = 0; j < r.length; j++) {
			int q=Integer.MIN_VALUE;
			for (int i = 0; i < j; i++) {
				if(q>p[i]+r[j-i]){
					q=q;
				}else{
					q=p[i]+r[j-i];
					s[j]=i;
				}
			}
			r[j]=q;
		}		
		list.add(r[n]);
		list.add(s);
		return list;
	}
	
	
         /**
          * 自底向上使用动态规划求解最优值
          * @param p 输入的长度对应的价格数组
          * @param n 长度
          * @return 最高价格
          */
	      public int bottomUpCutRod(int[] p,int n){
				int[] r=new int[n];
				r[0]=0;
				for (int j = 0; j < r.length; j++) {
					int q=Integer.MIN_VALUE;
					for (int i = 0; i < j; i++) {
						if(q>p[i]+r[j-i]){
							q=q;
						}else{
							q=p[i]+r[j-i];
						}
					}
					r[j]=q;
				}
				return r[n-1];
	      }
	
			/**
			 * 使用带备忘录的动态规划求解最优值
			 * @param p长度对应的价格的数组
			 * @param n 长度
			 * @return	最优值
			 */
			public int memoizedCutRod(int[] p,int n){
				int[] r=new int[n];
				for (int i = 0; i < r.length; i++) {
					r[i]=Integer.MIN_VALUE;
				}
				return memoizedCutRodAux(p,n,r);
			}
			/**
			 * 带备忘录的动态规划算法的辅助函数
			 * @param p 长度对应的价格的数组
			 * @param n 长度
			 * @param r  新数组，作为备忘录，存放以前阶段的最优值
			 * @return
			 */
			private int memoizedCutRodAux(int[] p, int n, int[] r) {
				// TODO Auto-generated method stub
				int q;
				if(r[n-1]>=0){
					return r[n-1];
				}
				if(n-1==0){
					q=0;
				}else{
					q=Integer.MIN_VALUE;
					for (int i = 1; i <n; i++) {
						if(p[i]+memoizedCutRodAux(p, n-i, r)>q){
							q=p[i]+memoizedCutRodAux(p, n-i, r);
						}else{
							q=q;
						}
					}
				}
				r[n-1]=q;
				return q;
			}
}
